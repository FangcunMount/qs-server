// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName                       = "/user.UserService/CreateUser"
	UserService_UpdateUserBasicInfo_FullMethodName              = "/user.UserService/UpdateUserBasicInfo"
	UserService_GetUser_FullMethodName                          = "/user.UserService/GetUser"
	UserService_CreateOrUpdateMiniProgramAccount_FullMethodName = "/user.UserService/CreateOrUpdateMiniProgramAccount"
	UserService_CreateOrUpdateOfficialAccount_FullMethodName    = "/user.UserService/CreateOrUpdateOfficialAccount"
	UserService_GetWechatAccountByOpenID_FullMethodName         = "/user.UserService/GetWechatAccountByOpenID"
	UserService_CreateTestee_FullMethodName                     = "/user.UserService/CreateTestee"
	UserService_UpdateTestee_FullMethodName                     = "/user.UserService/UpdateTestee"
	UserService_GetTestee_FullMethodName                        = "/user.UserService/GetTestee"
	UserService_TesteeExists_FullMethodName                     = "/user.UserService/TesteeExists"
	UserService_CreateWriter_FullMethodName                     = "/user.UserService/CreateWriter"
	UserService_UpdateWriter_FullMethodName                     = "/user.UserService/UpdateWriter"
	UserService_GetWriter_FullMethodName                        = "/user.UserService/GetWriter"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserService 用户模块服务 - 统一的用户体系服务
type UserServiceClient interface {
	// ========== 基础用户服务 ==========
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// 更新用户基本信息
	UpdateUserBasicInfo(ctx context.Context, in *UpdateUserBasicInfoRequest, opts ...grpc.CallOption) (*UpdateUserBasicInfoResponse, error)
	// 获取用户信息
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// ========== 微信账号服务 ==========
	// 创建或更新小程序账号
	CreateOrUpdateMiniProgramAccount(ctx context.Context, in *CreateOrUpdateMiniProgramAccountRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error)
	// 创建或更新公众号账号
	CreateOrUpdateOfficialAccount(ctx context.Context, in *CreateOrUpdateOfficialAccountRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error)
	// 获取微信账号
	GetWechatAccountByOpenID(ctx context.Context, in *GetWechatAccountByOpenIDRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error)
	// ========== 受试者服务 ==========
	// 创建受试者
	CreateTestee(ctx context.Context, in *CreateTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error)
	// 更新受试者
	UpdateTestee(ctx context.Context, in *UpdateTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error)
	// 获取受试者
	GetTestee(ctx context.Context, in *GetTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error)
	// 检查受试者是否存在
	TesteeExists(ctx context.Context, in *TesteeExistsRequest, opts ...grpc.CallOption) (*TesteeExistsResponse, error)
	// ========== 填写人服务 ==========
	// 创建填写人
	CreateWriter(ctx context.Context, in *CreateWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error)
	// 更新填写人
	UpdateWriter(ctx context.Context, in *UpdateWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error)
	// 获取填写人
	GetWriter(ctx context.Context, in *GetWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserBasicInfo(ctx context.Context, in *UpdateUserBasicInfoRequest, opts ...grpc.CallOption) (*UpdateUserBasicInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserBasicInfoResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserBasicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateOrUpdateMiniProgramAccount(ctx context.Context, in *CreateOrUpdateMiniProgramAccountRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WechatAccountResponse)
	err := c.cc.Invoke(ctx, UserService_CreateOrUpdateMiniProgramAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateOrUpdateOfficialAccount(ctx context.Context, in *CreateOrUpdateOfficialAccountRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WechatAccountResponse)
	err := c.cc.Invoke(ctx, UserService_CreateOrUpdateOfficialAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWechatAccountByOpenID(ctx context.Context, in *GetWechatAccountByOpenIDRequest, opts ...grpc.CallOption) (*WechatAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WechatAccountResponse)
	err := c.cc.Invoke(ctx, UserService_GetWechatAccountByOpenID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateTestee(ctx context.Context, in *CreateTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TesteeResponse)
	err := c.cc.Invoke(ctx, UserService_CreateTestee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateTestee(ctx context.Context, in *UpdateTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TesteeResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateTestee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTestee(ctx context.Context, in *GetTesteeRequest, opts ...grpc.CallOption) (*TesteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TesteeResponse)
	err := c.cc.Invoke(ctx, UserService_GetTestee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TesteeExists(ctx context.Context, in *TesteeExistsRequest, opts ...grpc.CallOption) (*TesteeExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TesteeExistsResponse)
	err := c.cc.Invoke(ctx, UserService_TesteeExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateWriter(ctx context.Context, in *CreateWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriterResponse)
	err := c.cc.Invoke(ctx, UserService_CreateWriter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateWriter(ctx context.Context, in *UpdateWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriterResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateWriter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWriter(ctx context.Context, in *GetWriterRequest, opts ...grpc.CallOption) (*WriterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriterResponse)
	err := c.cc.Invoke(ctx, UserService_GetWriter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// UserService 用户模块服务 - 统一的用户体系服务
type UserServiceServer interface {
	// ========== 基础用户服务 ==========
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// 更新用户基本信息
	UpdateUserBasicInfo(context.Context, *UpdateUserBasicInfoRequest) (*UpdateUserBasicInfoResponse, error)
	// 获取用户信息
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// ========== 微信账号服务 ==========
	// 创建或更新小程序账号
	CreateOrUpdateMiniProgramAccount(context.Context, *CreateOrUpdateMiniProgramAccountRequest) (*WechatAccountResponse, error)
	// 创建或更新公众号账号
	CreateOrUpdateOfficialAccount(context.Context, *CreateOrUpdateOfficialAccountRequest) (*WechatAccountResponse, error)
	// 获取微信账号
	GetWechatAccountByOpenID(context.Context, *GetWechatAccountByOpenIDRequest) (*WechatAccountResponse, error)
	// ========== 受试者服务 ==========
	// 创建受试者
	CreateTestee(context.Context, *CreateTesteeRequest) (*TesteeResponse, error)
	// 更新受试者
	UpdateTestee(context.Context, *UpdateTesteeRequest) (*TesteeResponse, error)
	// 获取受试者
	GetTestee(context.Context, *GetTesteeRequest) (*TesteeResponse, error)
	// 检查受试者是否存在
	TesteeExists(context.Context, *TesteeExistsRequest) (*TesteeExistsResponse, error)
	// ========== 填写人服务 ==========
	// 创建填写人
	CreateWriter(context.Context, *CreateWriterRequest) (*WriterResponse, error)
	// 更新填写人
	UpdateWriter(context.Context, *UpdateWriterRequest) (*WriterResponse, error)
	// 获取填写人
	GetWriter(context.Context, *GetWriterRequest) (*WriterResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserBasicInfo(context.Context, *UpdateUserBasicInfoRequest) (*UpdateUserBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBasicInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) CreateOrUpdateMiniProgramAccount(context.Context, *CreateOrUpdateMiniProgramAccountRequest) (*WechatAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMiniProgramAccount not implemented")
}
func (UnimplementedUserServiceServer) CreateOrUpdateOfficialAccount(context.Context, *CreateOrUpdateOfficialAccountRequest) (*WechatAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateOfficialAccount not implemented")
}
func (UnimplementedUserServiceServer) GetWechatAccountByOpenID(context.Context, *GetWechatAccountByOpenIDRequest) (*WechatAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatAccountByOpenID not implemented")
}
func (UnimplementedUserServiceServer) CreateTestee(context.Context, *CreateTesteeRequest) (*TesteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestee not implemented")
}
func (UnimplementedUserServiceServer) UpdateTestee(context.Context, *UpdateTesteeRequest) (*TesteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestee not implemented")
}
func (UnimplementedUserServiceServer) GetTestee(context.Context, *GetTesteeRequest) (*TesteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestee not implemented")
}
func (UnimplementedUserServiceServer) TesteeExists(context.Context, *TesteeExistsRequest) (*TesteeExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TesteeExists not implemented")
}
func (UnimplementedUserServiceServer) CreateWriter(context.Context, *CreateWriterRequest) (*WriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWriter not implemented")
}
func (UnimplementedUserServiceServer) UpdateWriter(context.Context, *UpdateWriterRequest) (*WriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWriter not implemented")
}
func (UnimplementedUserServiceServer) GetWriter(context.Context, *GetWriterRequest) (*WriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriter not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserBasicInfo(ctx, req.(*UpdateUserBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateOrUpdateMiniProgramAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateMiniProgramAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOrUpdateMiniProgramAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOrUpdateMiniProgramAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOrUpdateMiniProgramAccount(ctx, req.(*CreateOrUpdateMiniProgramAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateOrUpdateOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOrUpdateOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOrUpdateOfficialAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOrUpdateOfficialAccount(ctx, req.(*CreateOrUpdateOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWechatAccountByOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatAccountByOpenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWechatAccountByOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWechatAccountByOpenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWechatAccountByOpenID(ctx, req.(*GetWechatAccountByOpenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateTestee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTesteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateTestee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateTestee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateTestee(ctx, req.(*CreateTesteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateTestee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTesteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateTestee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateTestee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateTestee(ctx, req.(*UpdateTesteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTestee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTesteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTestee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTestee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTestee(ctx, req.(*GetTesteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TesteeExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TesteeExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TesteeExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TesteeExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TesteeExists(ctx, req.(*TesteeExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateWriter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateWriter(ctx, req.(*CreateWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateWriter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateWriter(ctx, req.(*UpdateWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWriter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWriter(ctx, req.(*GetWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUserBasicInfo",
			Handler:    _UserService_UpdateUserBasicInfo_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "CreateOrUpdateMiniProgramAccount",
			Handler:    _UserService_CreateOrUpdateMiniProgramAccount_Handler,
		},
		{
			MethodName: "CreateOrUpdateOfficialAccount",
			Handler:    _UserService_CreateOrUpdateOfficialAccount_Handler,
		},
		{
			MethodName: "GetWechatAccountByOpenID",
			Handler:    _UserService_GetWechatAccountByOpenID_Handler,
		},
		{
			MethodName: "CreateTestee",
			Handler:    _UserService_CreateTestee_Handler,
		},
		{
			MethodName: "UpdateTestee",
			Handler:    _UserService_UpdateTestee_Handler,
		},
		{
			MethodName: "GetTestee",
			Handler:    _UserService_GetTestee_Handler,
		},
		{
			MethodName: "TesteeExists",
			Handler:    _UserService_TesteeExists_Handler,
		},
		{
			MethodName: "CreateWriter",
			Handler:    _UserService_CreateWriter_Handler,
		},
		{
			MethodName: "UpdateWriter",
			Handler:    _UserService_UpdateWriter_Handler,
		},
		{
			MethodName: "GetWriter",
			Handler:    _UserService_GetWriter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
