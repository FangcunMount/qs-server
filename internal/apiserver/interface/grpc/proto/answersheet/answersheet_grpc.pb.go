// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: answersheet/answersheet.proto

package answersheet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnswerSheetService_SaveAnswerSheet_FullMethodName  = "/answersheet.AnswerSheetService/SaveAnswerSheet"
	AnswerSheetService_GetAnswerSheet_FullMethodName   = "/answersheet.AnswerSheetService/GetAnswerSheet"
	AnswerSheetService_ListAnswerSheets_FullMethodName = "/answersheet.AnswerSheetService/ListAnswerSheets"
)

// AnswerSheetServiceClient is the client API for AnswerSheetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnswerSheetService 答卷服务
type AnswerSheetServiceClient interface {
	// SaveAnswerSheet 保存答卷
	SaveAnswerSheet(ctx context.Context, in *SaveAnswerSheetRequest, opts ...grpc.CallOption) (*SaveAnswerSheetResponse, error)
	// GetAnswerSheet 获取答卷
	GetAnswerSheet(ctx context.Context, in *GetAnswerSheetRequest, opts ...grpc.CallOption) (*GetAnswerSheetResponse, error)
	// ListAnswerSheets 获取答卷列表
	ListAnswerSheets(ctx context.Context, in *ListAnswerSheetsRequest, opts ...grpc.CallOption) (*ListAnswerSheetsResponse, error)
}

type answerSheetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerSheetServiceClient(cc grpc.ClientConnInterface) AnswerSheetServiceClient {
	return &answerSheetServiceClient{cc}
}

func (c *answerSheetServiceClient) SaveAnswerSheet(ctx context.Context, in *SaveAnswerSheetRequest, opts ...grpc.CallOption) (*SaveAnswerSheetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAnswerSheetResponse)
	err := c.cc.Invoke(ctx, AnswerSheetService_SaveAnswerSheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerSheetServiceClient) GetAnswerSheet(ctx context.Context, in *GetAnswerSheetRequest, opts ...grpc.CallOption) (*GetAnswerSheetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswerSheetResponse)
	err := c.cc.Invoke(ctx, AnswerSheetService_GetAnswerSheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerSheetServiceClient) ListAnswerSheets(ctx context.Context, in *ListAnswerSheetsRequest, opts ...grpc.CallOption) (*ListAnswerSheetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnswerSheetsResponse)
	err := c.cc.Invoke(ctx, AnswerSheetService_ListAnswerSheets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerSheetServiceServer is the server API for AnswerSheetService service.
// All implementations must embed UnimplementedAnswerSheetServiceServer
// for forward compatibility.
//
// AnswerSheetService 答卷服务
type AnswerSheetServiceServer interface {
	// SaveAnswerSheet 保存答卷
	SaveAnswerSheet(context.Context, *SaveAnswerSheetRequest) (*SaveAnswerSheetResponse, error)
	// GetAnswerSheet 获取答卷
	GetAnswerSheet(context.Context, *GetAnswerSheetRequest) (*GetAnswerSheetResponse, error)
	// ListAnswerSheets 获取答卷列表
	ListAnswerSheets(context.Context, *ListAnswerSheetsRequest) (*ListAnswerSheetsResponse, error)
	mustEmbedUnimplementedAnswerSheetServiceServer()
}

// UnimplementedAnswerSheetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnswerSheetServiceServer struct{}

func (UnimplementedAnswerSheetServiceServer) SaveAnswerSheet(context.Context, *SaveAnswerSheetRequest) (*SaveAnswerSheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAnswerSheet not implemented")
}
func (UnimplementedAnswerSheetServiceServer) GetAnswerSheet(context.Context, *GetAnswerSheetRequest) (*GetAnswerSheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerSheet not implemented")
}
func (UnimplementedAnswerSheetServiceServer) ListAnswerSheets(context.Context, *ListAnswerSheetsRequest) (*ListAnswerSheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnswerSheets not implemented")
}
func (UnimplementedAnswerSheetServiceServer) mustEmbedUnimplementedAnswerSheetServiceServer() {}
func (UnimplementedAnswerSheetServiceServer) testEmbeddedByValue()                            {}

// UnsafeAnswerSheetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswerSheetServiceServer will
// result in compilation errors.
type UnsafeAnswerSheetServiceServer interface {
	mustEmbedUnimplementedAnswerSheetServiceServer()
}

func RegisterAnswerSheetServiceServer(s grpc.ServiceRegistrar, srv AnswerSheetServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnswerSheetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnswerSheetService_ServiceDesc, srv)
}

func _AnswerSheetService_SaveAnswerSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAnswerSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerSheetServiceServer).SaveAnswerSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerSheetService_SaveAnswerSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerSheetServiceServer).SaveAnswerSheet(ctx, req.(*SaveAnswerSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerSheetService_GetAnswerSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerSheetServiceServer).GetAnswerSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerSheetService_GetAnswerSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerSheetServiceServer).GetAnswerSheet(ctx, req.(*GetAnswerSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerSheetService_ListAnswerSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnswerSheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerSheetServiceServer).ListAnswerSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerSheetService_ListAnswerSheets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerSheetServiceServer).ListAnswerSheets(ctx, req.(*ListAnswerSheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnswerSheetService_ServiceDesc is the grpc.ServiceDesc for AnswerSheetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnswerSheetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "answersheet.AnswerSheetService",
	HandlerType: (*AnswerSheetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveAnswerSheet",
			Handler:    _AnswerSheetService_SaveAnswerSheet_Handler,
		},
		{
			MethodName: "GetAnswerSheet",
			Handler:    _AnswerSheetService_GetAnswerSheet_Handler,
		},
		{
			MethodName: "ListAnswerSheets",
			Handler:    _AnswerSheetService_ListAnswerSheets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "answersheet/answersheet.proto",
}
