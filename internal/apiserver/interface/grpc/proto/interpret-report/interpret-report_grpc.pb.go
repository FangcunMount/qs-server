// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: interpret-report/interpret-report.proto

package interpret_report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterpretReportService_SaveInterpretReport_FullMethodName               = "/interpret_report.InterpretReportService/SaveInterpretReport"
	InterpretReportService_GetInterpretReportByAnswerSheetID_FullMethodName = "/interpret_report.InterpretReportService/GetInterpretReportByAnswerSheetID"
)

// InterpretReportServiceClient is the client API for InterpretReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InterpretReportService 解读报告服务
type InterpretReportServiceClient interface {
	// SaveInterpretReport 保存解读报告
	SaveInterpretReport(ctx context.Context, in *SaveInterpretReportRequest, opts ...grpc.CallOption) (*SaveInterpretReportResponse, error)
	// GetInterpretReportByAnswerSheetID 根据答卷ID获取解读报告
	GetInterpretReportByAnswerSheetID(ctx context.Context, in *GetInterpretReportByAnswerSheetIDRequest, opts ...grpc.CallOption) (*GetInterpretReportByAnswerSheetIDResponse, error)
}

type interpretReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterpretReportServiceClient(cc grpc.ClientConnInterface) InterpretReportServiceClient {
	return &interpretReportServiceClient{cc}
}

func (c *interpretReportServiceClient) SaveInterpretReport(ctx context.Context, in *SaveInterpretReportRequest, opts ...grpc.CallOption) (*SaveInterpretReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveInterpretReportResponse)
	err := c.cc.Invoke(ctx, InterpretReportService_SaveInterpretReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interpretReportServiceClient) GetInterpretReportByAnswerSheetID(ctx context.Context, in *GetInterpretReportByAnswerSheetIDRequest, opts ...grpc.CallOption) (*GetInterpretReportByAnswerSheetIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterpretReportByAnswerSheetIDResponse)
	err := c.cc.Invoke(ctx, InterpretReportService_GetInterpretReportByAnswerSheetID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterpretReportServiceServer is the server API for InterpretReportService service.
// All implementations must embed UnimplementedInterpretReportServiceServer
// for forward compatibility.
//
// InterpretReportService 解读报告服务
type InterpretReportServiceServer interface {
	// SaveInterpretReport 保存解读报告
	SaveInterpretReport(context.Context, *SaveInterpretReportRequest) (*SaveInterpretReportResponse, error)
	// GetInterpretReportByAnswerSheetID 根据答卷ID获取解读报告
	GetInterpretReportByAnswerSheetID(context.Context, *GetInterpretReportByAnswerSheetIDRequest) (*GetInterpretReportByAnswerSheetIDResponse, error)
	mustEmbedUnimplementedInterpretReportServiceServer()
}

// UnimplementedInterpretReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterpretReportServiceServer struct{}

func (UnimplementedInterpretReportServiceServer) SaveInterpretReport(context.Context, *SaveInterpretReportRequest) (*SaveInterpretReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInterpretReport not implemented")
}
func (UnimplementedInterpretReportServiceServer) GetInterpretReportByAnswerSheetID(context.Context, *GetInterpretReportByAnswerSheetIDRequest) (*GetInterpretReportByAnswerSheetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterpretReportByAnswerSheetID not implemented")
}
func (UnimplementedInterpretReportServiceServer) mustEmbedUnimplementedInterpretReportServiceServer() {
}
func (UnimplementedInterpretReportServiceServer) testEmbeddedByValue() {}

// UnsafeInterpretReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterpretReportServiceServer will
// result in compilation errors.
type UnsafeInterpretReportServiceServer interface {
	mustEmbedUnimplementedInterpretReportServiceServer()
}

func RegisterInterpretReportServiceServer(s grpc.ServiceRegistrar, srv InterpretReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterpretReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterpretReportService_ServiceDesc, srv)
}

func _InterpretReportService_SaveInterpretReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInterpretReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterpretReportServiceServer).SaveInterpretReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterpretReportService_SaveInterpretReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterpretReportServiceServer).SaveInterpretReport(ctx, req.(*SaveInterpretReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterpretReportService_GetInterpretReportByAnswerSheetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterpretReportByAnswerSheetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterpretReportServiceServer).GetInterpretReportByAnswerSheetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterpretReportService_GetInterpretReportByAnswerSheetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterpretReportServiceServer).GetInterpretReportByAnswerSheetID(ctx, req.(*GetInterpretReportByAnswerSheetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterpretReportService_ServiceDesc is the grpc.ServiceDesc for InterpretReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterpretReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interpret_report.InterpretReportService",
	HandlerType: (*InterpretReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveInterpretReport",
			Handler:    _InterpretReportService_SaveInterpretReport_Handler,
		},
		{
			MethodName: "GetInterpretReportByAnswerSheetID",
			Handler:    _InterpretReportService_GetInterpretReportByAnswerSheetID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interpret-report/interpret-report.proto",
}
