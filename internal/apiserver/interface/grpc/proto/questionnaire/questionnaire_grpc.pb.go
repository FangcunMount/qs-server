// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: questionnaire/questionnaire.proto

package questionnaire

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionnaireService_GetQuestionnaire_FullMethodName   = "/questionnaire.QuestionnaireService/GetQuestionnaire"
	QuestionnaireService_ListQuestionnaires_FullMethodName = "/questionnaire.QuestionnaireService/ListQuestionnaires"
)

// QuestionnaireServiceClient is the client API for QuestionnaireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 问卷服务 - 对外提供查询功能
type QuestionnaireServiceClient interface {
	// 获取问卷详情
	GetQuestionnaire(ctx context.Context, in *GetQuestionnaireRequest, opts ...grpc.CallOption) (*GetQuestionnaireResponse, error)
	// 获取问卷列表
	ListQuestionnaires(ctx context.Context, in *ListQuestionnairesRequest, opts ...grpc.CallOption) (*ListQuestionnairesResponse, error)
}

type questionnaireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionnaireServiceClient(cc grpc.ClientConnInterface) QuestionnaireServiceClient {
	return &questionnaireServiceClient{cc}
}

func (c *questionnaireServiceClient) GetQuestionnaire(ctx context.Context, in *GetQuestionnaireRequest, opts ...grpc.CallOption) (*GetQuestionnaireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionnaireResponse)
	err := c.cc.Invoke(ctx, QuestionnaireService_GetQuestionnaire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnaireServiceClient) ListQuestionnaires(ctx context.Context, in *ListQuestionnairesRequest, opts ...grpc.CallOption) (*ListQuestionnairesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionnairesResponse)
	err := c.cc.Invoke(ctx, QuestionnaireService_ListQuestionnaires_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionnaireServiceServer is the server API for QuestionnaireService service.
// All implementations must embed UnimplementedQuestionnaireServiceServer
// for forward compatibility.
//
// 问卷服务 - 对外提供查询功能
type QuestionnaireServiceServer interface {
	// 获取问卷详情
	GetQuestionnaire(context.Context, *GetQuestionnaireRequest) (*GetQuestionnaireResponse, error)
	// 获取问卷列表
	ListQuestionnaires(context.Context, *ListQuestionnairesRequest) (*ListQuestionnairesResponse, error)
	mustEmbedUnimplementedQuestionnaireServiceServer()
}

// UnimplementedQuestionnaireServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionnaireServiceServer struct{}

func (UnimplementedQuestionnaireServiceServer) GetQuestionnaire(context.Context, *GetQuestionnaireRequest) (*GetQuestionnaireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireServiceServer) ListQuestionnaires(context.Context, *ListQuestionnairesRequest) (*ListQuestionnairesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionnaires not implemented")
}
func (UnimplementedQuestionnaireServiceServer) mustEmbedUnimplementedQuestionnaireServiceServer() {}
func (UnimplementedQuestionnaireServiceServer) testEmbeddedByValue()                              {}

// UnsafeQuestionnaireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionnaireServiceServer will
// result in compilation errors.
type UnsafeQuestionnaireServiceServer interface {
	mustEmbedUnimplementedQuestionnaireServiceServer()
}

func RegisterQuestionnaireServiceServer(s grpc.ServiceRegistrar, srv QuestionnaireServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionnaireServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionnaireService_ServiceDesc, srv)
}

func _QuestionnaireService_GetQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionnaireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServiceServer).GetQuestionnaire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionnaireService_GetQuestionnaire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServiceServer).GetQuestionnaire(ctx, req.(*GetQuestionnaireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireService_ListQuestionnaires_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionnairesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServiceServer).ListQuestionnaires(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionnaireService_ListQuestionnaires_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServiceServer).ListQuestionnaires(ctx, req.(*ListQuestionnairesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionnaireService_ServiceDesc is the grpc.ServiceDesc for QuestionnaireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionnaireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questionnaire.QuestionnaireService",
	HandlerType: (*QuestionnaireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestionnaire",
			Handler:    _QuestionnaireService_GetQuestionnaire_Handler,
		},
		{
			MethodName: "ListQuestionnaires",
			Handler:    _QuestionnaireService_ListQuestionnaires_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "questionnaire/questionnaire.proto",
}
