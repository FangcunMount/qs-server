# 增强日志中间件配置示例

# 服务器配置
server:
  mode: debug  # debug/test/release
  healthz: true
  # 中间件配置 - 按执行顺序排列
  middlewares:
    - recovery          # 崩溃恢复 (推荐第一个)
    - secure           # 安全头设置
    - nocache          # 禁用缓存
    - cors             # CORS跨域处理
    - enhanced_logger  # 增强日志记录 (替代 logger)
    # - logger         # 基础日志 (不要同时使用)
    - limit            # 请求限流
    - auth             # 认证授权
    - dump             # 请求转储 (调试用)

# 如果需要自定义增强日志配置，可以在代码中使用：
# middleware.EnhancedLoggerWithConfig(middleware.EnhancedLoggerConfig{
#   LogRequestHeaders:   true,    # 记录请求头
#   LogRequestBody:      true,    # 记录请求体
#   LogResponseHeaders:  true,    # 记录响应头  
#   LogResponseBody:     true,    # 记录响应体
#   SkipPaths:          []string{"/health", "/metrics"},  # 跳过的路径
#   MaxBodySize:        1048576,  # 最大记录体大小 (1MB)
#   MaskSensitiveFields: true,    # 脱敏敏感字段
# })

# 生产环境推荐配置
# server:
#   mode: release
#   middlewares:
#     - recovery
#     - secure
#     - nocache
#     - cors
#     - enhanced_logger  # 建议在代码中配置为只记录请求信息，不记录响应体
#     - limit
#     - auth

# 开发环境配置
# server:
#   mode: debug
#   middlewares:
#     - recovery
#     - enhanced_logger  # 记录完整信息用于调试
#     - cors
#     - dump            # 开发时可以添加dump用于调试 